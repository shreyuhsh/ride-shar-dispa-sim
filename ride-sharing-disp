import heapq
from collections import deque

class Driver:
    def __init__(self, name, rating, location):
        self.name = name
        self.rating = rating
        self.location = location
    def __lt__(self, other):
        return self.rating > other.rating

class Rider:
    def __init__(self, name, location):
        self.name = name
        self.location = location

class RideSharing:
    def __init__(self):
        self.available_drivers = []
        self.waiting_riders = deque()
        self.ride_history = []
    def add_driver(self, driver):
        heapq.heappush(self.available_drivers, driver)
        print(f"🚗 Driver {driver.name} added at location {driver.location} (⭐ {driver.rating})")
    def add_rider(self, rider):
        self.waiting_riders.append(rider)
        print(f"🙋 Rider {rider.name} requested a ride from location {rider.location}")
        self.assign_driver()
    def distance(self, loc1, loc2):
        return abs(loc1 - loc2)
    def assign_driver(self):
        if not self.available_drivers or not self.waiting_riders:
            print("⚠️ No drivers or riders available for assignment.")
            return
        rider = self.waiting_riders.popleft()
        best_driver = None
        best_dist = float("inf")
        for driver in self.available_drivers:
            d = self.distance(driver.location, rider.location)
            if d < best_dist:
                best_driver = driver
                best_dist = d
        self.available_drivers.remove(best_driver)
        heapq.heapify(self.available_drivers)
        self.ride_history.append((best_driver.name, rider.name, best_dist))
        print("\n📍 Ride Assignment Snapshot:")
        print("   " + "-" * 30)
        print(f"   🚗 Driver: {best_driver.name} (⭐ {best_driver.rating})")
        print(f"   🙋 Rider : {rider.name}")
        print(f"   📏 Distance: {best_dist} km")
        print("   " + "-" * 30 + "\n")
    def show_history(self):
        if not self.ride_history:
            print("📂 No rides completed yet.")
            return
        print("\n📜 Ride History:")
        print("-" * 40)
        for ride in self.ride_history:
            print(f"🚗 {ride[0]} → 🙋 {ride[1]} | 📏 {ride[2]} km")
        print("-" * 40)

def menu():
    app = RideSharing()
    while True:
        print("\n--- Ride Sharing Menu ---")
        print("1. Add Driver")
        print("2. Add Rider")
        print("3. View Ride History")
        print("4. Exit")
        choice = input("Choose an option: ")
        if choice == "1":
            name = input("Driver name: ")
            rating = float(input("Driver rating (0-5): "))
            location = int(input("Driver location (number): "))
            app.add_driver(Driver(name, rating, location))
        elif choice == "2":
            name = input("Rider name: ")
            location = int(input("Rider location (number): "))
            app.add_rider(Rider(name, location))
        elif choice == "3":
            app.show_history()
        elif choice == "4":
            print("👋 Exiting Ride Sharing App...")
            break
        else:
            print("❌ Invalid choice, try again.")

if __name__ == "__main__":
    menu()

        
        
        
